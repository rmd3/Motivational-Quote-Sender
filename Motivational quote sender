from __future__ import print_function
import datetime
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import random
from twilio.rest import Client

# If modifying these scopes, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']


def main():
    """Shows basic usage of the Google Calendar API.
    Prints the start and name of the next 10 events on the user's calendar.
    """
    category = []
    dic = {}
    with open("bestquote.txt", "r")as f:
        for line in f:
            line = line.rstrip()
            if len(line) > 0:
                if line[0] == ":":
                    category = line[1:]
                    dic[category] = []
                else:
                    dic[category].append(line)
    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('calendar', 'v3', credentials=creds)

    # Call the Calendar API
    now = datetime.datetime.utcnow().isoformat() + 'Z'  # 'Z' indicates UTC time
    print('Getting the upcoming 10 events')
    events_result = service.events().list(calendarId='primary', timeMin=now,
                                        maxResults=11, singleEvents=True,
                                        orderBy='startTime').execute()
    events = events_result.get('items', [])
    # Makes authentication for Phone message
    account_sid = "AC8768b45e873091837086220984460784"
    auth_token = "22506716c9b93554e30771e00d03a83e"
    client = Client(account_sid, auth_token)
    # Declaring var "text"
    text = " "
    # Creating sub categories for different events on the user's calendar
    holidays = ["new year's day", "new year", "new years", "christmas", "thanksgiving", "christmas day", "thanksgiving day", "halloween", "valentine", "valentine's day", "memorial day", "labor day", "independence day", "martin luther king jr. day", "veterans day"]
    tests = ["exam", "test", "quiz"]
    # Finding out if the user's calendar has events and if so which quote to send to user's phone
    if not events:
        pass
    for event in events:
        default = "Only I can change my life. No one can do it for me."
        quoteIsFound = False
        event_words = event['summary'].split(" ")
        for x in event_words:
            x = x.lower()
            if x in holidays:
                x = "holiday"
            if x in tests:
                x = "test"
            if x in dic:
                text=dic[x][random.randint(0, len(dic[x])-1)]
                quoteIsFound = True
                break
        if quoteIsFound == False:
            text = default
        # Code that sends text message to user's phone from a trial phone number
        message = client.messages.create(
            body=text,
            from_='+12057843249',
            to='+19107421687'
        )
        print(message.sid)
if __name__ == '__main__':
    main()
